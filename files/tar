#-- Tar interception command. Suppresses annoying "SCHILY" messages when extracting a TAR archive originating from a MacOS system.
# This is primarily intended for Linux systems, but can be used for any system with GNU/Tar.
# This cuts down the amount of output echoed to your terminal or output log,
# and is expecially useful when extracting a tar file from MacOS with a lot of files.
#
# Author: Jeremy Melanson
#
# Source-code, documentation and revision Git repository: https://github.com/zish/bashrc_enhancements
#
# Last-Modified: 2016-09-08
#
# $ git clone https://github.com/zish/bashrc_enhancements
#
# To use this, source the file from your .bashrc (or .bash_profile).
#
#
# This file is part of bashrc_enhancements.
#
#    bashrc_enhancements is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    bashrc_enhancements is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with bashrc_enhancements.  If not, see <http://www.gnu.org/licenses/>.

tar () {


  local STDINSTDOUT=
  local TARBIN="$(which tar)"

  local CMD="${TARBIN}"

  local IFS=$'\n'

  #-- Retrieve options from "tar --help".
  # Long-style opts containing (COMMAND|DATE|DATE-OR-FILE|FILE|NAME|STRING|STYLE)
  # will have the value double-quoted.
  #
  R='^\ +(-[a-zA-Z]+,\ +)?(--[a-z\-]+=)(COMMAND|DATE(-OR-FILE)?|FILE|NAME|ST(RING|YLE))'
  declare -A QOPTS

  for L in $(${TARBIN} --help); do
    [[ "${L}" =~ ${R} ]] && QOPTS["${BASH_REMATCH[2]}"]=1 || true

  done


  for O in "${@}"; do
    #- "Short" style opts.
    [[ "${O}" =~ ^-[a-zA-Z] ]] && {
      CMD+=" ${O}"

    } || {
      #- "Long" style opts. Some have values that need double-quoting.
      [[ "${O}" =~ ^(--[a-z\-]+=?)(.*) ]] && {
        local ONAME="${BASH_REMATCH[1]}"
        local OVAL="${BASH_REMATCH[2]}"

        [ -n "${QOPTS[${ONAME}]}" ] &&
          CMD+=" ${ONAME}\"${OVAL}\"" || CMD+=" ${ONAME}"

      } || {
        CMD+=" \"${O}\""

      }
    }

    [ "${O}" = "-" ] && STDINSTDOUT=1 || true
  done


  [ -n "${STDINSTDOUT}" ] && {
    echo "Piping to/from STDIN/STDOUT. Cannot filter STDERR at this time."
    eval "${CMD}"

  } || {
    local STDERR=$( { eval "${CMD}"; } 2>&1 );

    for ERR in ${STDERR}; do
      [[ ! "${ERR}" =~ .*[Hh]eader\ [Kk]eyword\ [\"\']SCHILY.* ]] &&
        echo "${ERR}" || true
    done

  }

} # END tar ()

# vim: ft=sh
