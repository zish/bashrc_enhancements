#-- Add a directory to PATH, but make sure it exists.
# - If it already exists, change location or remove it. Repeated entries are condensed as well.
#
# Author: Jeremy Melanson
#
# Source-code, documentation and revision Git repository: https://github.com/zish/bashrc_enhancements
#
# Last-Modified: 2016-09-08
#
# $ git clone https://github.com/zish/bashrc_enhancements
#
# To use this, source the file from your .bashrc (or .bash_profile).
#
#-- Syntax examples:
# "addpath /usr/bin first"     - Adds "/usr/bin" to the beginning of PATH.
# "addpath /usr/local/sbin"   - Adds "/usr/local/sbin" to the end of PATH.
# "addpath /usr/local/sbin"   - Repeat of the previous to illustrate that
#                       duplicates do not get added.
# "addpath ${HOME}/foo first"  - Adds "foo" from your home directory
#                       Ex. "/home/zish/foo") to the beginning
#                       of PATH.
# "addpath ${HOME}/bar remove"  - Removes any references to "${HOME}/bar"
#                       Ex. "/home/zish/foo") from PATH.
#
#-- Results:
# - If the original value of PATH was "/bin:/usr/bin:/home/zish/bar"...
# ... and "/home/zish/foo" exists, the end result would be
#     "/home/zish/foo:/bin:/usr/bin:/usr/local/sbin".
# ... and "/home/zish/foo" does not exist, the end result would be
#     "/bin:/usr/bin:/usr/local/sbin".
#
#
# This file is part of bashrc_enhancements.
#
# bashrc_enhancements is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
#  bashrc_enhancements is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with bashrc_enhancements.  If not, see <http://www.gnu.org/licenses/>.

addpath () {
  #-- Enable the use of embedded regular expressions (if not already set)
  shopt -s extglob

  local NEW=${1}
  local PPOS=;
  [[ ${2} ]] && PPOS=${2}
  #-- Add a little verbosity if this is nonzero.
  # Useful for debugging things, if needed.
  local VERB=${3}

  #-- These are a couple helper functions to support addpath.
  __addpath_verb () { [[ ${VERB} ]] && echo "-- ${1}"; }
  __addpath_join () { local IFS="${AP_VAR_DELIM}"; echo "${*}"; }
  __addpath_clean () { local IFS="${AP_VAR_DELIM}"; echo "${*}"; }

  #-- Default variable to act against is 'PATH'.
  [ -z "${AP_VAR_NAME}" ] && AP_VAR_NAME="PATH"
  #-- Default delimiter is ':'.
  [ -z "${AP_VAR_DELIM}" ] && AP_VAR_DELIM=":"

  #-- We can't use associative arrays (hashes) in BaSH versions < 4.x).
  (( "${BASH_VERSINFO}" >= 4 )) && {
    #-- Read PATH into an associative array (automatically removes duplicates).
    declare -A CPATHS
    local OI="${IFS}"; local IFS="${AP_VAR_DELIM}"; local C=0
    eval "for P in \${${AP_VAR_NAME}}; do \
          CPATHS[\${P}]=\${C}; C=\$((\${C} + 1)); done"
    local IFS="${OI}"
  } || {
    #-- We get here if BaSH version < 4.
    __addpath_verb "Warning: Using an old BaSH version (${BASH_VERSINFO}). "
    __addpath_verb "Some features are disabled."
    if [ "${PPOS}" = "first" ]; then
      eval "${AP_VAR_NAME}=\"${NEW}${AP_VAR_DELIM}$(eval "echo \${${AP_VAR_NAME}}")\""
      __addpath_verb "Added ${NEW} to beginning of ${AP_VAR_NAME}"
    elif [ "${PPOS}" = "remove" ]; then
      __addpath_verb "Running old BaSH version. Skipping removal of '${NEW}'."
    else
      eval "${AP_VAR_NAME}=\"$(eval "echo \${${AP_VAR_NAME}}")${AP_VAR_DELIM}${NEW}\""
      __addpath_verb "Added ${NEW} to end of ${AP_VAR_NAME}"
    fi
    export ${AP_VAR_NAME}
    unset AP_VAR_NAME;  return
  }

  #-- Remove trailing '/', if it exists.
  [[ "${NEW}" =~ (.+)\/$ ]] && NEW="${BASH_REMATCH[1]}"
  #-- Make sure the directory exists, and that it wasn't
  # already added to PATH.
  [ ! -d ${NEW} ] && {
    __addpath_verb "${NEW} does not exist or is not a directory"
    if [ "${PPOS}" = "remove" ]; then
      __addpath_verb "Removal of ${NEW} requested. Continuing with task."
    else
      unset AP_VAR_NAME;  return
    fi
  }

  local PATHDIRS=()
  for P in "${!CPATHS[@]}"; do
    local POS="${CPATHS[${P}]}"
    if [ "${P}" = "${NEW}" ]; then
      __addpath_verb "${NEW} already in ${AP_VAR_NAME}."
      if [ "${PPOS}" = "remove" ]; then
        __addpath_verb "Removal of ${NEW} requested. Continuing with task."
      else
        __addpath_verb "Not continuing."
        unset AP_VAR_NAME;  return
      fi
    else
      PATHDIRS[${POS}]="${P}"
    fi
  done

  if [ "${PPOS}" = "first" ]; then
    PATHDIRS=(${NEW} ${PATHDIRS[@]})
    eval "${AP_VAR_NAME}=\"$(__addpath_join ${PATHDIRS[@]})\""
    __addpath_verb "Added ${NEW} to beginning of ${AP_VAR_NAME}"
  elif [ "${PPOS}" = "remove" ]; then
    __addpath_verb "Removal of ${NEW} requested. Not re-adding to ${AP_VAR_NAME}."
    eval "${AP_VAR_NAME}=\"$(__addpath_join ${PATHDIRS[@]})\""
  else
    PATHDIRS=(${PATHDIRS[@]} ${NEW})
    eval "${AP_VAR_NAME}=\"$(__addpath_join ${PATHDIRS[@]})\""
    __addpath_verb "Added ${NEW} to end of ${AP_VAR_NAME}"
  fi
  export ${AP_VAR_NAME}
  unset AP_VAR_NAME
}

# vim: tabstop=2 expandtab filetype=sh
